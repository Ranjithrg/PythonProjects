# роКро┤ро┐ропро░рпН родро░ро╡рпБроХро│рпИ роиро┐ро░рпНро╡роХро┐роХрпНроХ роТро░рпБ ро╡роХрпБрокрпНрокрпБ (Class)
class Employee:
    def __init__(self, emp_id, name, age, department, salary):
        self.emp_id = emp_id  # роКро┤ро┐ропро░рпН роРроЯро┐
        self.name = name  # рокрпЖропро░рпН
        self.age = age  # ро╡ропродрпБ
        self.department = department  # родрпБро▒рпИ
        self.salary = salary  # роЪроорпНрокро│роорпН

    def display(self):
        return "{} | {} | {} | {} | {}".format(self.emp_id, self.name, self.age, self.department, self.salary)

# роЕройрпИродрпНродрпБ роКро┤ро┐ропро░рпНроХро│рпИропрпБроорпН роиро┐ро░рпНро╡роХро┐роХрпНроХрпБроорпН ро╡роХрпБрокрпНрокрпБ (Class)
class EmployeeManager:
    def __init__(self):
        self.employees = []  # роКро┤ро┐ропро░рпНроХро│рпИ роЪрпЗрооро┐роХрпНроХ роТро░рпБ List

    # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ роЪрпЗро░рпНроХрпНроХ
    def add_employees(self):
        while True:
            emp_id = input("Enter Employee ID (or type 'done' to stop): ")
            if emp_id.lower() == 'done':
                break  # Exit if user types 'done'
            name = input("Enter Name: ")
            age = input("Enter Age: ")
            department = input("Enter Department: ")
            salary = input("Enter Salary: ")
            self.employees.append(Employee(emp_id, name, age, department, salary))
            print("тЬЕ Employee Added!\n")

    # роЕройрпИродрпНродрпБ роКро┤ро┐ропро░рпНроХро│рпИропрпБроорпН роХро╛рогрпНрокро┐роХрпНроХ
    def view_employees(self):
        if not self.employees:
            print("тЭМ No records found!\n")
        else:
            print("\nID | Name | Age | Department | Salary")
            for emp in self.employees:
                print(emp.display())
            print()

    # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ рокрпБродрпБрокрпНрокро┐роХрпНроХ
    def update_employees(self):
        while True:
            emp_id = input("Enter Employee ID to Update (or type 'done' to stop): ")
            if emp_id.lower() == 'done':
                break
            for emp in self.employees:
                if emp.emp_id == emp_id:
                    emp.name = input("Enter New Name: ")
                    emp.age = input("Enter New Age: ")
                    emp.department = input("Enter New Department: ")
                    emp.salary = input("Enter New Salary: ")
                    print("тЬЕ Employee Updated!\n")
                    break
            else:
                print("тЭМ Employee Not Found!\n")

    # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ роирпАроХрпНроХ
    def delete_employees(self):
        while True:
            emp_id = input("Enter Employee ID to Delete (or type 'done' to stop): ")
            if emp_id.lower() == 'done':
                break
            self.employees = [emp for emp in self.employees if emp.emp_id != emp_id]
            print("тЬЕ Employee Deleted!\n")

    # роКро┤ро┐ропро░рпИ родрпЗроЯ
    def search_employee(self):
        keyword = input("Enter Name or Department to Search: ").lower()
        found = [emp for emp in self.employees if keyword in emp.name.lower() or keyword in emp.department.lower()]
        if found:
            print("\nMatching Employees:")
            for emp in found:
                print(emp.display())
            print()
        else:
            print("тЭМ No matching records found!\n")

# роорпЖройрпН родрпКроХрпБродро┐ (Main Program)
manager = EmployeeManager()
while True:
    print("\nЁЯУК Employee Management System")
    print("1. Add Employees (Multiple)")
    print("2. View Employees")
    print("3. Update Employees (Multiple)")
    print("4. Delete Employees (Multiple)")
    print("5. Search Employee")
    print("6. Exit")

    choice = input("Enter your choice: ")

    if choice == "1":
        manager.add_employees()  # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ роЪрпЗро░рпНроХрпНроХ
    elif choice == "2":
        manager.view_employees()  # роЕройрпИродрпНродрпБ роКро┤ро┐ропро░рпНроХро│рпИропрпБроорпН роХро╛рогрпНрокро┐роХрпНроХ
    elif choice == "3":
        manager.update_employees()  # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ рокрпБродрпБрокрпНрокро┐роХрпНроХ
    elif choice == "4":
        manager.delete_employees()  # рокро▓ роКро┤ро┐ропро░рпНроХро│рпИ роирпАроХрпНроХ
    elif choice == "5":
        manager.search_employee()  # роКро┤ро┐ропро░рпИ родрпЗроЯ
    elif choice == "6":
        print("ЁЯЪА Exiting Employee Management System. Goodbye!")
        break  # Exit Program
    else:
        print("тЭМ Invalid choice! Try again.\n")
